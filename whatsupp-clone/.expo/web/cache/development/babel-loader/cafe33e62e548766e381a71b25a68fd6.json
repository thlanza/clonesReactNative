{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\TestesDev\\\\whatsupp-clone\\\\components\\\\InputBox\\\\index.tsx\";\n\nimport { Entypo, FontAwesome5, Fontisto, MaterialCommunityIcons } from '@expo/vector-icons';\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport KeyboardAvoidingView from \"react-native-web/dist/exports/KeyboardAvoidingView\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport styles from \"./styles\";\nimport { API, Auth, graphqlOperation } from \"aws-amplify\";\nimport { createMessage, updateChatRoom } from \"../../graphql/mutations\";\n\nvar InputBox = function InputBox(props) {\n  var chatRoomID = props.chatRoomID;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      message = _useState2[0],\n      setMessage = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      myUserId = _useState4[0],\n      setMyUserId = _useState4[1];\n\n  useEffect(function () {\n    var fetchUser = function fetchUser() {\n      var userInfo;\n      return _regeneratorRuntime.async(function fetchUser$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context.sent;\n              setMyUserId(userInfo.attributes.sub);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchUser();\n  }, []);\n\n  var onMicrophonePress = function onMicrophonePress() {\n    console.warn('microfone');\n  };\n\n  var updateChatRoomLastMessage = function updateChatRoomLastMessage(messageId) {\n    return _regeneratorRuntime.async(function updateChatRoomLastMessage$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(updateChatRoom, {\n              input: {\n                id: chatRoomID,\n                lastMessageID: messageId\n              }\n            })));\n\n          case 3:\n            _context2.next = 8;\n            break;\n\n          case 5:\n            _context2.prev = 5;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log(_context2.t0);\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n\n  var onSendPress = function onSendPress() {\n    var newMessageData;\n    return _regeneratorRuntime.async(function onSendPress$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createMessage, {\n              input: {\n                content: message,\n                userID: myUserId,\n                chatRoomID: chatRoomID\n              }\n            })));\n\n          case 3:\n            newMessageData = _context3.sent;\n            _context3.next = 6;\n            return _regeneratorRuntime.awrap(updateChatRoomLastMessage(newMessageData.data.createMessage.id));\n\n          case 6:\n            _context3.next = 11;\n            break;\n\n          case 8:\n            _context3.prev = 8;\n            _context3.t0 = _context3[\"catch\"](0);\n            console.log(_context3.t0);\n\n          case 11:\n            setMessage('');\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, [[0, 8]], Promise);\n  };\n\n  var onPress = function onPress() {\n    if (!message) {\n      onMicrophonePress();\n    } else {\n      onSendPress();\n    }\n  };\n\n  return React.createElement(KeyboardAvoidingView, {\n    style: styles.container,\n    behavior: Platform.OS == \"ios\" ? \"padding\" : \"height\",\n    keyboardVerticalOffset: 20,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.mainContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  }, React.createElement(FontAwesome5, {\n    name: \"laugh-beam\",\n    size: 24,\n    color: \"grey\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }), React.createElement(TextInput, {\n    placeholder: \"Digite uma mensagem\",\n    style: styles.textInput,\n    multiline: true,\n    value: message,\n    onChangeText: setMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  }), React.createElement(Entypo, {\n    name: \"attachment\",\n    size: 24,\n    color: \"grey\",\n    style: styles.icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 17\n    }\n  }), !message && React.createElement(Fontisto, {\n    name: \"camera\",\n    size: 24,\n    color: \"grey\",\n    style: styles.icon,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 30\n    }\n  })), React.createElement(TouchableOpacity, {\n    onPress: onPress,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.buttonContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }\n  }, !message ? React.createElement(MaterialCommunityIcons, {\n    name: \"microphone\",\n    size: 28,\n    color: \"white\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 21\n    }\n  }) : React.createElement(MaterialCommunityIcons, {\n    name: \"send\",\n    size: 28,\n    color: \"white\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 23\n    }\n  }))));\n};\n\nexport default InputBox;","map":{"version":3,"sources":["C:/TestesDev/whatsupp-clone/components/InputBox/index.tsx"],"names":["Entypo","FontAwesome5","Fontisto","MaterialCommunityIcons","React","useEffect","useState","styles","API","Auth","graphqlOperation","createMessage","updateChatRoom","InputBox","props","chatRoomID","message","setMessage","myUserId","setMyUserId","fetchUser","currentAuthenticatedUser","userInfo","attributes","sub","onMicrophonePress","console","warn","updateChatRoomLastMessage","messageId","graphql","input","id","lastMessageID","log","onSendPress","content","userID","newMessageData","data","onPress","container","Platform","OS","mainContainer","textInput","icon","buttonContainer"],"mappings":"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","sourcesContent":["import { Entypo, FontAwesome5, Fontisto, MaterialCommunityIcons } from '@expo/vector-icons';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { View, Text, TextInput, NativeSyntheticEvent, TextInputChangeEventData, TouchableOpacity, KeyboardAvoidingView, Platform } from 'react-native';\r\nimport styles from './styles';\r\nimport {\r\n    API,\r\n    Auth,\r\n    graphqlOperation\r\n} from \"aws-amplify\";\r\nimport { createMessage, updateChatRoom } from \"../../graphql/mutations\";\r\n\r\n\r\nconst InputBox = (props) => {\r\n\r\n    const { chatRoomID } = props;\r\n\r\n    const [message, setMessage] = useState('');\r\n    const [myUserId, setMyUserId] = useState(null);\r\n\r\n    useEffect(() => {\r\n        const fetchUser = async () => {\r\n            const userInfo = await Auth.currentAuthenticatedUser();\r\n            setMyUserId(userInfo.attributes.sub);\r\n        }\r\n        fetchUser();\r\n    }, [])\r\n\r\n\r\n    const onMicrophonePress = () => {\r\n        console.warn('microfone')\r\n    }\r\n\r\n    const updateChatRoomLastMessage = async (messageId: string) => {\r\n        try {\r\n            await API.graphql(\r\n                graphqlOperation(\r\n                    updateChatRoom, {\r\n                        input: {\r\n                            id: chatRoomID,\r\n                            lastMessageID: messageId\r\n                        }\r\n                    }\r\n                )\r\n            )\r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n    }\r\n\r\n    const onSendPress = async () => {\r\n\r\n        try {\r\n            const newMessageData = await API.graphql(\r\n                graphqlOperation(\r\n                    createMessage, {\r\n                        input: {\r\n                            content: message,\r\n                            userID: myUserId,\r\n                            chatRoomID \r\n                        }\r\n                    }\r\n                )\r\n            )\r\n\r\n            await updateChatRoomLastMessage(newMessageData.data.createMessage.id);\r\n        } catch(e) {\r\n            console.log(e);\r\n        }\r\n        setMessage('');\r\n    }\r\n\r\n    const onPress = () => {\r\n        if (!message) {\r\n            onMicrophonePress();\r\n        } else {\r\n            onSendPress();\r\n        }\r\n    }\r\n\r\n    \r\n    return (\r\n        <KeyboardAvoidingView style={styles.container}\r\n            behavior={Platform.OS == \"ios\" ? \"padding\" : \"height\"}\r\n            keyboardVerticalOffset={20}\r\n        >\r\n            <View style={styles.mainContainer}>\r\n                <FontAwesome5 name=\"laugh-beam\" size={24} color=\"grey\" />\r\n                <TextInput \r\n                    placeholder=\"Digite uma mensagem\"\r\n                    style={styles.textInput} \r\n                    multiline\r\n                    value={message}\r\n                    onChangeText={setMessage}\r\n                    />\r\n                <Entypo name=\"attachment\" size={24} color=\"grey\" style={styles.icon}/>\r\n                {!message && <Fontisto name=\"camera\" size={24} color=\"grey\" style={styles.icon}/>}\r\n            </View>\r\n            <TouchableOpacity onPress={onPress}>\r\n            <View style={styles.buttonContainer}>\r\n                {!message ?\r\n                    <MaterialCommunityIcons name=\"microphone\" size={28} color=\"white\" />\r\n                    : <MaterialCommunityIcons name=\"send\" size={28} color=\"white\" />\r\n                }\r\n               \r\n            </View>\r\n            </TouchableOpacity>\r\n        </KeyboardAvoidingView>\r\n    )\r\n}\r\n\r\nexport default InputBox;\r\n"]},"metadata":{},"sourceType":"module"}