{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\TestesDev\\\\whatsupp-clone\\\\screens\\\\ChatRoomScreen.tsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { useRoute } from '@react-navigation/native';\nimport ChatMessage from \"../components/ChatMessage\";\nimport BG from \"../assets/images/BG.png\";\nimport InputBox from \"../components/InputBox\";\nimport { API, graphqlOperation, Auth } from \"aws-amplify\";\nimport { messagesByChatRoom } from \"../graphql/queries\";\nimport { onCreateMessage } from \"../graphql/subscriptions\";\n\nvar ChatRoomScreen = function ChatRoomScreen() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      messages = _useState2[0],\n      setMessages = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      myId = _useState4[0],\n      setMyId = _useState4[1];\n\n  var route = useRoute();\n  useEffect(function () {\n    var fetchMessages = function fetchMessages() {\n      var messagesData;\n      return _regeneratorRuntime.async(function fetchMessages$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(messagesByChatRoom, {\n                chatRoomID: route.params.id,\n                sortDirection: \"DESC\"\n              })));\n\n            case 2:\n              messagesData = _context.sent;\n              setMessages(messagesData.data.messagesByChatRoom.items);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchMessages();\n  }, []);\n  useEffect(function () {\n    var getMyId = function getMyId() {\n      var userInfo;\n      return _regeneratorRuntime.async(function getMyId$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context2.sent;\n              setMyId(userInfo.attributes.sub);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getMyId();\n  }, []);\n  useEffect(function () {\n    var subscription = API.graphql(graphqlOperation(onCreateMessage)).subscribe({\n      next: function next(data) {\n        var newMessage = data.value.data.onCreateMessage;\n\n        if (newMessage.chatRoomID !== route.params.id) {\n          return;\n        }\n\n        setMessages([newMessage].concat(_toConsumableArray(messages)));\n      }\n    });\n    return function () {\n      return subscription.unsubscribe();\n    };\n  }, [messages]);\n  return React.createElement(ImageBackground, {\n    style: {\n      width: '100%',\n      height: '100%'\n    },\n    source: BG,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, React.createElement(FlatList, {\n    data: messages,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(ChatMessage, {\n        myId: myId,\n        message: item,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 43\n        }\n      });\n    },\n    inverted: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), React.createElement(InputBox, {\n    chatRoomID: route.params.id,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default ChatRoomScreen;","map":{"version":3,"sources":["C:/TestesDev/whatsupp-clone/screens/ChatRoomScreen.tsx"],"names":["React","useEffect","useState","useRoute","ChatMessage","BG","InputBox","API","graphqlOperation","Auth","messagesByChatRoom","onCreateMessage","ChatRoomScreen","messages","setMessages","myId","setMyId","route","fetchMessages","graphql","chatRoomID","params","id","sortDirection","messagesData","data","items","getMyId","currentAuthenticatedUser","userInfo","attributes","sub","subscription","subscribe","next","newMessage","value","unsubscribe","width","height","item"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { FlatList, Text, ImageBackground, KeyboardAvoidingView, Platform } from 'react-native';\r\nimport { useRoute } from '@react-navigation/native';\r\nimport ChatMessage from '../components/ChatMessage';\r\nimport BG from '../assets/images/BG.png';\r\nimport InputBox from '../components/InputBox';\r\n\r\nimport { \r\n    API,\r\n    graphqlOperation,\r\n    Auth\r\n} from \"aws-amplify\";\r\nimport { messagesByChatRoom } from \"../graphql/queries\";\r\nimport { onCreateMessage } from \"../graphql/subscriptions\";\r\n\r\nconst ChatRoomScreen = () => {\r\n\r\n    const [messages, setMessages] = useState([]);\r\n    const [myId, setMyId] = useState(null);\r\n\r\n    const route = useRoute();\r\n\r\n    useEffect(() => {\r\n        const fetchMessages = async () => {\r\n            const messagesData = await API.graphql(\r\n                graphqlOperation(\r\n                    messagesByChatRoom, {\r\n                        chatRoomID: route.params.id,\r\n                        sortDirection: \"DESC\"\r\n                    }\r\n                )\r\n            )\r\n\r\n            setMessages(messagesData.data.messagesByChatRoom.items);\r\n        }\r\n        fetchMessages();\r\n    }, []);\r\n\r\n\r\n    useEffect(() => {\r\n        const getMyId = async () => {\r\n            let userInfo = await Auth.currentAuthenticatedUser();\r\n            setMyId(userInfo.attributes.sub);\r\n        };\r\n        getMyId();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        const subscription = API.graphql(\r\n            graphqlOperation(onCreateMessage)\r\n        ).subscribe({\r\n            next: (data) => {\r\n                const newMessage = data.value.data.onCreateMessage;\r\n                if (newMessage.chatRoomID !== route.params.id) {\r\n                    return;\r\n                } \r\n                setMessages([newMessage, ...messages]);\r\n            }\r\n        });\r\n\r\n        return () => subscription.unsubscribe();\r\n    }, [messages])\r\n\r\n    return (\r\n            <ImageBackground style={{width: '100%', height: '100%'}} source={BG}>\r\n            <FlatList\r\n                data={messages}\r\n                renderItem={({ item }) => <ChatMessage myId={myId} message={item} />}\r\n                inverted\r\n            />\r\n            <InputBox chatRoomID={route.params.id}/>\r\n            </ImageBackground>\r\n    )\r\n}\r\n\r\nexport default ChatRoomScreen;"]},"metadata":{},"sourceType":"module"}