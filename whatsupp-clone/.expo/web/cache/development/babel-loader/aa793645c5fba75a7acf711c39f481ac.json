{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\TestesDev\\\\whatsupp-clone\\\\components\\\\ChatListItem\\\\index.tsx\";\n\nimport React, { useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport styles from \"./style\";\nimport moment from 'moment';\nimport { useNavigation } from '@react-navigation/native';\nimport { Auth } from \"aws-amplify\";\n\nvar ChatListItem = function ChatListItem(props) {\n  var chatRoom = props.chatRoom;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      otherUser = _useState2[0],\n      setOtherUser = _useState2[1];\n\n  var navigation = useNavigation();\n  useEffect(function () {\n    var getOtherUser = function getOtherUser() {\n      var userInfo;\n      return _regeneratorRuntime.async(function getOtherUser$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser());\n\n            case 2:\n              userInfo = _context.sent;\n\n              if (chatRoom.chatRoomUsers.items[0].user.id === userInfo.attributes.sub) {\n                setOtherUser(chatRoom.chatRoomUsers.items[1].user);\n              } else {\n                setOtherUser(chatRoom.chatRoomUsers.items[0].user);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getOtherUser();\n  }, []);\n\n  var onClick = function onClick() {\n    navigation.navigate('ChatRoom', {\n      id: chatRoom.id,\n      name: otherUser.name\n    });\n  };\n\n  if (!otherUser) {\n    return null;\n  }\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPress: onClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }\n  }, React.createElement(View, {\n    style: styles.leftContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 17\n    }\n  }, React.createElement(Image, {\n    source: {\n      uri: otherUser.imageUri\n    },\n    style: styles.avatar,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }\n  }), React.createElement(View, {\n    style: styles.midContainer,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }, React.createElement(Text, {\n    style: styles.username,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 25\n    }\n  }, otherUser.name), React.createElement(Text, {\n    numberOfLines: 1,\n    style: styles.lastMessage,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 25\n    }\n  }, chatRoom.lastMessage ? chatRoom.lastMessage.user.name + \": \" + chatRoom.lastMessage.content : \"\"))), React.createElement(Text, {\n    style: styles.time,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 17\n    }\n  }, chatRoom.lastMessage && moment(chatRoom.lastMessage.createdAt).format(\"DD/MM/YYYY\"))));\n};\n\nexport default ChatListItem;","map":{"version":3,"sources":["C:/TestesDev/whatsupp-clone/components/ChatListItem/index.tsx"],"names":["React","useEffect","useState","styles","moment","useNavigation","Auth","ChatListItem","props","chatRoom","otherUser","setOtherUser","navigation","getOtherUser","currentAuthenticatedUser","userInfo","chatRoomUsers","items","user","id","attributes","sub","onClick","navigate","name","container","leftContainer","uri","imageUri","avatar","midContainer","username","lastMessage","content","time","createdAt","format"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Text, View, Image, TouchableWithoutFeedback } from \"react-native\";\r\nimport { ChatRoom } from '../../types';\r\nimport styles from './style';\r\nimport moment from 'moment';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { Auth } from \"aws-amplify\";\r\n\r\n\r\nexport type ChatListItemProps = {\r\n    chatRoom: ChatRoom;\r\n}\r\n\r\nconst ChatListItem = (props: ChatListItemProps) => {\r\n    const { chatRoom } = props;\r\n    const [otherUser, setOtherUser] = useState(null);\r\n\r\n    const navigation = useNavigation();\r\n\r\n    useEffect(() => {\r\n        const getOtherUser = async () => {\r\n            const userInfo = await Auth.currentAuthenticatedUser();\r\n            if (chatRoom.chatRoomUsers.items[0].user.id === userInfo.attributes.sub) {\r\n                setOtherUser(chatRoom.chatRoomUsers.items[1].user);\r\n            } else {\r\n                setOtherUser(chatRoom.chatRoomUsers.items[0].user);\r\n            }\r\n        }\r\n        getOtherUser();\r\n    }, [])\r\n    const onClick = () => {\r\n        navigation.navigate('ChatRoom', { \r\n            id: chatRoom.id,\r\n            name: otherUser.name\r\n        });\r\n    }\r\n\r\n    if(!otherUser) {\r\n        return null;\r\n    }\r\n\r\n    return (\r\n        <TouchableWithoutFeedback onPress={onClick}>\r\n            <View style={styles.container}>\r\n                <View style={styles.leftContainer}>\r\n                    <Image source={{ uri: otherUser.imageUri }} style={styles.avatar} />\r\n                    <View style={styles.midContainer}>\r\n                        <Text style={styles.username}>{otherUser.name}</Text>\r\n                        <Text \r\n                            numberOfLines={1} \r\n                            style={styles.lastMessage}>\r\n                                {chatRoom.lastMessage ? `${chatRoom.lastMessage.user.name}: ${chatRoom.lastMessage.content}`: \r\n                                \"\"}\r\n                            </Text>\r\n                    </View>\r\n                </View>\r\n                <Text style={styles.time}>{chatRoom.lastMessage && moment(chatRoom.lastMessage.createdAt).format(\"DD/MM/YYYY\")}</Text>\r\n            </View>\r\n        </TouchableWithoutFeedback>\r\n\r\n    )\r\n};\r\n\r\nexport default ChatListItem;"]},"metadata":{},"sourceType":"module"}