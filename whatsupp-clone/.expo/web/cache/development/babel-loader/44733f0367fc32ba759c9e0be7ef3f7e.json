{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"C:\\\\TestesDev\\\\whatsupp-clone\\\\App.tsx\";\nimport { StatusBar } from 'expo-status-bar';\nimport React, { useEffect } from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport useCachedResources from \"./hooks/useCachedResources\";\nimport useColorScheme from \"./hooks/useColorScheme\";\nimport Navigation from \"./navigation\";\nimport Amplify from 'aws-amplify';\nimport config from \"./aws-exports\";\nimport { withAuthenticator } from 'aws-amplify-react-native';\nimport { Auth, API, graphqlOperation } from 'aws-amplify';\nimport { getUser } from \"./graphql/queries\";\nimport { createUser } from \"./graphql/mutations\";\nAmplify.configure(config);\n\nfunction App() {\n  var isLoadingComplete = useCachedResources();\n  var colorScheme = useColorScheme();\n  var randomImages = ['https://hieumobile.com/wp-content/uploads/avatar-among-us-2.jpg', 'https://hieumobile.com/wp-content/uploads/avatar-among-us-3.jpg', 'https://hieumobile.com/wp-content/uploads/avatar-among-us-6.jpg', 'https://hieumobile.com/wp-content/uploads/avatar-among-us-9.jpg'];\n\n  var getRandomImage = function getRandomImage() {\n    return randomImages[Math.floor(Math.random() * randomImages.length)];\n  };\n\n  useEffect(function () {\n    var fetchUser = function fetchUser() {\n      var userInfo, userData, newUser;\n      return _regeneratorRuntime.async(function fetchUser$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Auth.currentAuthenticatedUser({\n                bypassCache: true\n              }));\n\n            case 2:\n              userInfo = _context.sent;\n\n              if (!userInfo) {\n                _context.next = 10;\n                break;\n              }\n\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(getUser, {\n                id: userInfo.attributes.sub\n              })));\n\n            case 6:\n              userData = _context.sent;\n\n              if (!userData.data.getUser) {\n                _context.next = 10;\n                break;\n              }\n\n              console.log(\"Usuário já está registrado no banco de dados.\");\n              return _context.abrupt(\"return\");\n\n            case 10:\n              newUser = {\n                id: userInfo.attributes.sub,\n                name: userInfo.username,\n                imageUri: getRandomImage(),\n                status: 'Hey, I am using Whatsapp'\n              };\n              _context.next = 13;\n              return _regeneratorRuntime.awrap(API.graphql(graphqlOperation(createUser, {\n                input: newUser\n              })));\n\n            case 13:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    fetchUser();\n  }, []);\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return React.createElement(SafeAreaProvider, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 7\n      }\n    }, React.createElement(Navigation, {\n      colorScheme: colorScheme,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }\n    }), React.createElement(StatusBar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }));\n  }\n}\n\nexport default withAuthenticator(App);","map":{"version":3,"sources":["C:/TestesDev/whatsupp-clone/App.tsx"],"names":["StatusBar","React","useEffect","SafeAreaProvider","useCachedResources","useColorScheme","Navigation","Amplify","config","withAuthenticator","Auth","API","graphqlOperation","getUser","createUser","configure","App","isLoadingComplete","colorScheme","randomImages","getRandomImage","Math","floor","random","length","fetchUser","currentAuthenticatedUser","bypassCache","userInfo","graphql","id","attributes","sub","userData","data","console","log","newUser","name","username","imageUri","status","input"],"mappings":";;AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,OAAOC,kBAAP;AACA,OAAOC,cAAP;AACA,OAAOC,UAAP;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,MAAP;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,IAAT,EAAeC,GAAf,EAAoBC,gBAApB,QAA4C,aAA5C;AACA,SAASC,OAAT;AACA,SAASC,UAAT;AAEAP,OAAO,CAACQ,SAAR,CAAkBP,MAAlB;;AAEA,SAASQ,GAAT,GAAe;AACb,MAAMC,iBAAiB,GAAGb,kBAAkB,EAA5C;AACA,MAAMc,WAAW,GAAGb,cAAc,EAAlC;AAEA,MAAMc,YAAY,GAAG,CACnB,iEADmB,EAEnB,iEAFmB,EAGnB,iEAHmB,EAInB,iEAJmB,CAArB;;AAOA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,GAAM;AAC3B,WAAOD,YAAY,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,YAAY,CAACK,MAAxC,CAAD,CAAnB;AACD,GAFD;;AAKAtB,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMuB,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAEOf,IAAI,CAACgB,wBAAL,CAA8B;AAACC,gBAAAA,WAAW,EAAE;AAAd,eAA9B,CAFP;;AAAA;AAEVC,cAAAA,QAFU;;AAAA,mBAKZA,QALY;AAAA;AAAA;AAAA;;AAAA;AAAA,+CAOOjB,GAAG,CAACkB,OAAJ,CAAYjB,gBAAgB,CAACC,OAAD,EAAU;AAAEiB,gBAAAA,EAAE,EAAEF,QAAQ,CAACG,UAAT,CAAoBC;AAA1B,eAAV,CAA5B,CAPP;;AAAA;AAOVC,cAAAA,QAPU;;AAAA,mBAWbA,QAAQ,CAACC,IAAT,CAAcrB,OAXD;AAAA;AAAA;AAAA;;AAYdsB,cAAAA,OAAO,CAACC,GAAR,CAAY,+CAAZ;AAZc;;AAAA;AAkBVC,cAAAA,OAlBU,GAkBA;AACdP,gBAAAA,EAAE,EAAEF,QAAQ,CAACG,UAAT,CAAoBC,GADV;AAEdM,gBAAAA,IAAI,EAAEV,QAAQ,CAACW,QAFD;AAGdC,gBAAAA,QAAQ,EAAEpB,cAAc,EAHV;AAIdqB,gBAAAA,MAAM,EAAE;AAJM,eAlBA;AAAA;AAAA,+CAyBV9B,GAAG,CAACkB,OAAJ,CAAYjB,gBAAgB,CAACE,UAAD,EAAa;AAAE4B,gBAAAA,KAAK,EAAEL;AAAT,eAAb,CAA5B,CAzBU;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AA6BAZ,IAAAA,SAAS;AAEV,GAhCQ,EAgCN,EAhCM,CAAT;;AAkCA,MAAI,CAACR,iBAAL,EAAwB;AACtB,WAAO,IAAP;AACD,GAFD,MAEO;AACL,WACE,oBAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,UAAD;AAAY,MAAA,WAAW,EAAEC,WAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFF,CADF;AAMD;AACF;;AAED,eAAeT,iBAAiB,CAACO,GAAD,CAAhC","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useEffect } from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport useCachedResources from './hooks/useCachedResources';\nimport useColorScheme from './hooks/useColorScheme';\nimport Navigation from './navigation';\nimport Amplify from 'aws-amplify'\nimport config from './aws-exports'\nimport { withAuthenticator } from 'aws-amplify-react-native'\nimport { Auth, API, graphqlOperation } from 'aws-amplify'\nimport { getUser } from './graphql/queries';\nimport { createUser } from './graphql/mutations';\n\nAmplify.configure(config)\n\nfunction App() {\n  const isLoadingComplete = useCachedResources();\n  const colorScheme = useColorScheme();\n\n  const randomImages = [\n    'https://hieumobile.com/wp-content/uploads/avatar-among-us-2.jpg',\n    'https://hieumobile.com/wp-content/uploads/avatar-among-us-3.jpg',\n    'https://hieumobile.com/wp-content/uploads/avatar-among-us-6.jpg',\n    'https://hieumobile.com/wp-content/uploads/avatar-among-us-9.jpg'\n  ]\n\n  const getRandomImage = () => {\n    return randomImages[Math.floor(Math.random() * randomImages.length)]\n  }\n\n  // run this snippet only the when App is first mounted\n  useEffect(() => {\n    const fetchUser = async () => {\n      // get Authenticated user from Auth\n      const userInfo = await Auth.currentAuthenticatedUser({bypassCache: true});\n      \n\n      if (userInfo) {\n      // get the user from Backend with the user SUB from Auth\n      const userData = await API.graphql(graphqlOperation(getUser, { id: userInfo.attributes.sub }))\n      \n      \n      \n      if(userData.data.getUser) {\n        console.log(\"Usuário já está registrado no banco de dados.\");\n        return;\n      }\n      }\n\n      // if the is no user in DB with the id, then create one\n      const newUser = {\n        id: userInfo.attributes.sub,\n        name: userInfo.username,\n        imageUri: getRandomImage(),\n        status: 'Hey, I am using Whatsapp'\n      }\n\n      await API.graphql(graphqlOperation(createUser, { input: newUser } ))\n\n\n    }\n    fetchUser();\n\n  }, [])\n\n  if (!isLoadingComplete) {\n    return null;\n  } else {\n    return (\n      <SafeAreaProvider>\n        <Navigation colorScheme={colorScheme} />\n        <StatusBar />\n      </SafeAreaProvider>\n    );\n  }\n}\n\nexport default withAuthenticator(App);\n"]},"metadata":{},"sourceType":"module"}